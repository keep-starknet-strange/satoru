// fn update_order(
        //     ref self: ContractState,
        //     key: felt252,
        //     size_delta_usd: u256,
        //     acceptable_price: u256,
        //     trigger_price: u256,
        //     min_output_amount: u256,
        //     order: Order
        // ) -> Order {
        //     // Check only controller.
        //     let role_module_state = RoleModule::unsafe_new_contract_state();
        //     role_module_state.only_controller();

        //     // Fetch data store.
        //     let base_order_handler_state = BaseOrderHandler::unsafe_new_contract_state();
        //     let data_store = base_order_handler_state.data_store.read();
        //     let event_emitter = base_order_handler_state.event_emitter.read();

        //     global_reentrancy_guard::non_reentrant_before(data_store);

        //     // Validate feature.
        //     feature_utils::validate_feature(
        //         data_store,
        //         keys::update_order_feature_disabled_key(get_contract_address(), order.order_type)
        //     );

        //     assert(base_order_utils::is_market_order(order.order_type), 'OrderNotUpdatable');

        //     let mut updated_order = order.clone();
        //     updated_order.size_delta_usd = size_delta_usd;
        //     updated_order.trigger_price = trigger_price;
        //     updated_order.acceptable_price = acceptable_price;
        //     updated_order.min_output_amount = min_output_amount;
        //     updated_order.is_frozen = false;

        //     // Allow topping up of execution fee as frozen orders will have execution fee reduced.
        //     let fee_token = token_utils::fee_token(data_store);
        //     let order_vault = base_order_handler_state.order_vault.read();
        //     let received_fee_token = order_vault.record_transfer_in(fee_token);
        //     updated_order.execution_fee = received_fee_token;

        //     let estimated_gas_limit = gas_utils::estimate_execute_order_gas_limit(
        //         data_store, @updated_order
        //     );
        //     gas_utils::validate_execution_fee(
        //         data_store, estimated_gas_limit, updated_order.execution_fee
        //     );

        //     updated_order.touch();

        //     base_order_utils::validate_non_empty_order(@updated_order);

        //     data_store.set_order(key, updated_order);
        //     event_emitter
        //         .emit_order_updated(
        //             key, size_delta_usd, acceptable_price, trigger_price, min_output_amount
        //         );

        //     global_reentrancy_guard::non_reentrant_after(data_store);

        //     updated_order
        // }

        // fn cancel_order(ref self: ContractState, key: felt252) {
        //     let starting_gas: u256 = 0; // TODO: Get starting gas from Cairo.

        //     // Check only controller.
        //     let role_module_state = RoleModule::unsafe_new_contract_state();
        //     role_module_state.only_controller();

        //     // Fetch data store.
        //     let base_order_handler_state = BaseOrderHandler::unsafe_new_contract_state();
        //     let data_store = base_order_handler_state.data_store.read();

        //     global_reentrancy_guard::non_reentrant_before(data_store);

        //     let order = data_store.get_order(key);

        //     // Validate feature.
        //     feature_utils::validate_feature(
        //         data_store,
        //         keys::cancel_order_feature_disabled_key(get_contract_address(), order.order_type)
        //     );

        //     if base_order_utils::is_market_order(order.order_type) {
        //         exchange_utils::validate_request_cancellation(
        //             data_store, order.updated_at_block, 'Order'
        //         )
        //     }

        //     order_utils::cancel_order(
        //         data_store,
        //         base_order_handler_state.event_emitter.read(),
        //         base_order_handler_state.order_vault.read(),
        //         key,
        //         order.account,
        //         starting_gas,
        //         keys::user_initiated_cancel(),
        //         ArrayTrait::<felt252>::new(),
        //     );

        //     global_reentrancy_guard::non_reentrant_after(data_store);
        // }


        internal

/// Handles error from order.
        /// # Arguments
        /// * `key` - The key of the deposit to handle error for.
        /// * `starting_gas` - The starting gas of the transaction.
        /// * `reason` - The reason of the error.
        // fn handle_order_error(
        //     self: @ContractState, key: felt252, starting_gas: u256, reason_bytes: Array<felt252>
        // ) {
        //     let error_selector = error_utils::get_error_selector_from_data(reason_bytes.span());

        //     let mut base_order_handler_state = BaseOrderHandler::unsafe_new_contract_state();
        //     let data_store = base_order_handler_state.data_store.read();

        //     let order = data_store.get_order(key);
        //     // let is_market_order = base_order_utils::is_market_order(order.order_type);

        //     if (oracle_utils::is_oracle_error(error_selector)
        //         || order.is_frozen
        //         // || (!is_market_order && error_selector == PositionError::EMPTY_POSITION)
        //         || error_selector == OrderError::EMPTY_ORDER
        //         || error_selector == FeatureError::DISABLED_FEATURE
        //         || error_selector == OrderError::INVALID_KEEPER_FOR_FROZEN_ORDER
        //         || error_selector == OrderError::UNSUPPORTED_ORDER_TYPE
        //         || error_selector == OrderError::INVALID_ORDER_PRICES) {
        //         assert(false, error_utils::revert_with_custom_error(reason_bytes.span()))
        //     }

        //     let reason = error_utils::get_revert_message(reason_bytes.span());

        //     if (is_market_order
        //         || error_selector == MarketError::INVALID_POSITION_MARKET
        //         || error_selector == MarketError::INVALID_COLLATERAL_TOKEN_FOR_MARKET
        //         || error_selector == PositionError::INVALID_POSITION_SIZE_VALUES) {
        //         order_utils::cancel_order(
        //             data_store,
        //             base_order_handler_state.event_emitter.read(),
        //             base_order_handler_state.order_vault.read(),
        //             key,
        //             order.account,
        //             starting_gas,
        //             reason,
        //             reason_bytes,
        //         );
        //         return ();
        //     }

        //     order_utils::freeze_order(
        //         data_store,
        //         base_order_handler_state.event_emitter.read(),
        //         base_order_handler_state.order_vault.read(),
        //         key,
        //         get_caller_address(),
        //         starting_gas,
        //         reason,
        //         reason_bytes
        //     );
        // }

